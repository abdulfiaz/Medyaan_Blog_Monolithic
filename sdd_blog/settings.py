"""
Django settings for sdd_blog project.

Generated by 'django-admin startproject' using Django 3.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Set settings values from environment variables or env.json file
if os.path.isfile('env.json'):
    with open('env.json') as f:
        data = json.load(f)

        try:
            db_name = data["db_name"]
        except:
            db_name = os.environ['DB_NAME']
        try:
            db_password = data["db_password"]
        except:
            db_password = os.environ["db_password"]
        try:
            db_user = data['db_user']
        except:
            db_user = os.environ['DB_USERNAME']
        try:
            db_host = data['db_host']
        except:
            db_host = os.environ['DB_HOSTNAME']
        try:
            db_port = data['db_port']
        except:
            db_port = os.environ['DB_PORT']

        try:
            JWT_VERIFY = data["JWT_VERIFY"]
        except:
            JWT_VERIFY = os.environ["JWT_VERIFY"]
        try:
            JWT_VERIFY_EXPIRATION = data["JWT_VERIFY_EXPIRATION"]
        except:
            JWT_VERIFY_EXPIRATION = os.environ["JWT_VERIFY_EXPIRATION"]
        try:
            JWT_EXPIRATION_TIME = data["JWT_EXPIRATION_TIME"]
        except:
            JWT_EXPIRATION_TIME = os.environ["JWT_EXPIRATION_TIME"]
        try:
            JWT_AUTH_HEADER_PREFIX = data["JWT_AUTH_HEADER_PREFIX"]
        except:
            JWT_AUTH_HEADER_PREFIX = os.environ["JWT_AUTH_HEADER_PREFIX"]
        try:
            JWT_ALGORITHM = data["JWT_ALGORITHM"]
        except:
            JWT_ALGORITHM = os.environ["JWT_ALGORITHM"]
        try:
            JWT_PAYLOAD_HANDLER = data["JWT_PAYLOAD_HANDLER"]
        except:
            JWT_PAYLOAD_HANDLER = os.environ["JWT_PAYLOAD_HANDLER"]
    
        try:
            APPLICATION_HOST = data["APPLICATION_HOST"]
        except:
            APPLICATION_HOST = os.environ["APPLICATION_HOST"]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ea_7txky+j*u@d72zkx%2o&b$80nfu9k%c10@#=4ll-*o7o_z$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'adminapp',
    'events',
    'posts',
    'users',
]

# jwt setup

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# JWT Authentication settings
import datetime

JWT_AUTH = {

    'JWT_VERIFY': JWT_VERIFY,
    'JWT_VERIFY_EXPIRATION': JWT_VERIFY_EXPIRATION,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=int(JWT_EXPIRATION_TIME)),
    'JWT_AUTH_HEADER_PREFIX': JWT_AUTH_HEADER_PREFIX,
    'JWT_ALGORITHM': JWT_ALGORITHM,
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALLOW_REFRESH': True,

    'JWT_ENCODE_HANDLER': 'users.utils.jwt_encode_handler',
    'JWT_DECODE_HANDLER': 'users.utils.jwt_decode_handler',
    'JWT_PAYLOAD_HANDLER': 'users.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'users.utils.jwt_get_userid_from_payload_handler',

}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sdd_blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sdd_blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASE_ROUTERS = ['activity_log.router.DatabaseAppsRouter']
DATABASE_APPS_MAPPING = {'activity_log': 'logs'}

DATABASES = {

    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': db_host,
        'PORT': db_port
    }
}
# AWS storage for images
import json
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

with open(os.path.join(BASE_DIR, 'env.json')) as f:
    env_variables = json.load(f)

AWS_ACCESS_KEY_ID = env_variables["AWS_ACCESS_KEY_ID"]
AWS_SECRET_ACCESS_KEY = env_variables["AWS_SECRET_ACCESS_KEY"]
AWS_STORAGE_BUCKET_NAME = env_variables["AWS_STORAGE_BUCKET_NAME"]
AWS_S3_CUSTOM_DOMAIN = env_variables["AWS_S3_CUSTOM_DOMAIN"]
AWS_S3_REGION_NAME = env_variables.get("AWS_S3_REGION_NAME")  # Optional
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

# VAT
VAT = env_variables["VAT"]
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'users.CustomUser'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
